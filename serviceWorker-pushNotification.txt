// module:

push notification for PWAs.

// why push notification?

1. adding push notifications. push notification increases user engagement.
2. makes pwa feel more native. 
3. gives user fast access to content that they want.


// how does it work.

this action involves two parts.
1. push, data sent from remote server to our webapp.
2. notification, are what we send to the user.

// we need to always ask for permission from client.

// whats the service workers role?
we need this to run push notificstion even when the browser is closed. so thats one critical reasons fro using serviceWorkers

// subscriptions?
what a subscriptions? this refers to a browser on a given device(user agent). we can create a subscription with js in our serviceWorker.
subscriptions are used to subscribe to certain browser vendor push servers. because we need the notification to run when our app is closed.

so we need a back end to send a push notification to the browser vendors push server. and in turn the push server will trigger the push event and alert my service worker because the service worker was subscribed.


///////////////////////////////////////////
// requesting permission from the client.
to request for permission from the client, we need to make use of the notification api. like so.  

const isGranted = await window.Notification.requestPermission();

// this method is callback based and also promise based, so use any preferred approach.


///////////////////////////////////////////
// displaying notifications.
// we can display notifications from our app js file and also from the service worker.

for app file notifications:
// create new instance of the notification class.
// new Notification('message',optionsObject)
new window.Notification("notification permission granted");


for serviceWorker notification:
// get access to the currentluy register serviceWorker managing the APP.
const swreg = await navigator.serviceWorker.ready();

const notificationObject = {
    body: "you have subcribed to get notification from this app",
};

// on the registered serviceWorker we have access to the showNotification method which an extention of the Notification constructor.

swreg.showNotification("notification permission granted",notificationObject);


//////////////////////////////////////////////////////////////////////////// notification options object.
// it is good to note that the notification will be displayed by the device and not the browser. for example if im on a mac book, it will be the mac os responsible for showing the notification. notications are a device feature.

// not all options object properties can be shown by all devices.

body:'text',
icon:'pathToIconfile',
image:'pathToImagefile',
dir:'direction of text:ltr,rtl.'
lang:'language code',
vibrate:[100,50,200],[vibrateTime,pauseTime,vibrateTime,...].
badge:'a black a white image or icon of the app',

// advanced options.
tag:'uniqueIdentify for a notification',

// if notification have the same tag, the newer one will over write the older one.
// with out tag the notications will stack, like cnn headlines.

renotify:'bool'.
// used to renotify as a user, for evry new notication.

// try to not make notifications spammy.

// the next options is the actions option, this is used for adding actions to the notification. ie, confirm, close, cancel.

// actions:[{action:'confirm',title:'okay},{action:'cancel',title:'okay}]

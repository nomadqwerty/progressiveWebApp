// module:

push notification for PWAs.

// why push notification?

1. adding push notifications. push notification increases user engagement.
2. makes pwa feel more native. 
3. gives user fast access to content that they want.


// how does it work.

this action involves two parts.
1. push, data sent from remote server to our webapp.
2. notification, are what we send to the user.

// we need to always ask for permission from client.

// whats the service workers role?
we need this to run push notificstion even when the browser is closed. so thats one critical reasons fro using serviceWorkers

// subscriptions?
what a subscriptions? this refers to a browser on a given device(user agent). we can create a subscription with js in our serviceWorker.
subscriptions are used to subscribe to certain browser vendor push servers. because we need the notification to run when our app is closed.

so we need a back end to send a push notification to the browser vendors push server. and in turn the push server will trigger the push event and alert my service worker because the service worker was subscribed.


///////////////////////////////////////////
// requesting permission from the client.
to request for permission from the client, we need to make use of the notification api. like so.  

const isGranted = await window.Notification.requestPermission();

// this method is callback based and also promise based, so use any preferred approach.


///////////////////////////////////////////
// displaying notifications.
// we can display notifications from our app js file and also from the service worker.

for app file notifications:
// create new instance of the notification class.
// new Notification('message',optionsObject)
new window.Notification("notification permission granted");


for serviceWorker notification:
// get access to the currentluy register serviceWorker managing the APP.
const swreg = await navigator.serviceWorker.ready();

const notificationObject = {
    body: "you have subcribed to get notification from this app",
};

// on the registered serviceWorker we have access to the showNotification method which an extention of the Notification constructor.

swreg.showNotification("notification permission granted",notificationObject);


//////////////////////////////////////////////////////////////////////////// notification options object.
// it is good to note that the notification will be displayed by the device and not the browser. for example if im on a mac book, it will be the mac os responsible for showing the notification. notications are a device feature.
// i.e
  const notificationObject = {
      body: "you have subcribed to get notification from this app",
      icon: "../images/icons/app-icon-384x384.png",
      image: "../images/main-image-lg.jpg",
      dir: "ltr",
      lang: "eng-US",
      vibrate: [100, 50, 100],
      badge: "../images/icons/app-icon-96x96.png",
      tag: "subcriptionTag",
      renotify: false,
      actions: [
        { action: "confirm", title: "confirm" },
        { action: "cancel", title: "cancel" },
      ],
    };

// not all options object properties can be shown by all devices.

// core options.
body:'text',
icon:'pathToIconfile',
image:'pathToImagefile',
dir:'direction of text:ltr,rtl.'
lang:'language code',

// extra options
vibrate:[100,50,200],[vibrateTime,pauseTime,vibrateTime,...].
badge:'a black a white image or icon of the app',

// advanced options.
tag:'uniqueIdentify for a notification',

// if notification have the same tag, the newer one will over write the older one.
// with out tag the notications will stack, like cnn headlines.

renotify:'bool'.
// used to renotify as a user, for evry new notication.

// try to not make notifications spammy.

// the next options is the actions option, this is used for adding actions to the notification. ie, confirm, close, cancel.

// actions:[{action:'confirm',title:'okay},{action:'cancel',title:'okay}]


// interactions with the notification.
// what happens when the notification gets clicked on or what happens when the notification action is clicked(confirmed or cancled).

// this happens in the service worker.
// why the service worker, the service worker runs in the background. and remember that the notification is a system feature and not a browser feature.

// because the service worker is still running in the background, if the user interacts with the notification but our website is closed, the service worker is still available to respond to the user interactions.


//// LISTENING FOR USER CLICKS.
listen to the notification click with the onnotificationclick event.

the notification event object gives access to.

NotificationEvent object, (details about the user interaction), notification(about the notification crafted by the webapp), currentTarget:(object with details about the current service worker).

// based on the user action we can perform certain operations.
// because the event gives us access to the notification, this is an instance of the Notification class.

we can make use of the close instance method, after completing operations.

// notification.close()

// i.e
onnotificationclick = (e) => {
// an operation
  notification.close();
};


//// LISTENING TO CLOSE ACTIONS.
listen to the notification close evant with the onnotificationclose.

the notification event object gives access to.

NotificationEvent object, (details about the user interaction), notification(about the notification crafted by the webapp), currentTarget:(object with details about the current service worker).

// based on the user closing the notification we can perform certain operations, like store the notification to be analyzed to understand why the user didnt interact with the notification.

// because the event gives us access to the notification, this is an instance of the Notification class.

// ie
onnotificationclose = (e) => {
// an operation
  notification.close();
};

///////////////////////////////////////////////
// PUSHING THE DATA.

// previously we have gained permissions to show notifications. we have alse been able to display the notification to the user and we have also listen for usr interactions on notication.

// now let use create a new subscription.
// we use the service worker because it will be the service worker that will react to incoming push messages.

but because we create new subscriptions based on the user interaction(dom). ie we create subscribe for push messages only if the user clicks on the enable notification button.
 because is user interaction based will use the serviceWorker instance exposed to the web page.

// once we get acces to the serviceWorker, there is the pushManger prop. this exposes the pushManger api to us, so we can create new subs and get old subs
// ie
const pushSubscription = async () => {
  if (navigator.serviceWorker) {
    if (window.Notification) {
      const swReg = await navigator.serviceWorker.ready;
      const subs = await swReg.pushManager.getSubscription();

      console.log(subs);
      if(!subs){
        // create new sub
      }else{
        // use old sub
      }
    }
  }
};

// creating new subscription.
// step one use the pushManager.suscribe(), this creates a new sub.

// subcribeing to push vendor server is best done in a secure way, because all a hacker needs is the url to which we send notifications to our app, once they have it, its easy for them to start sending unsolicitated messages to users.

// to secure the subscription.
// when calling the .suscribe() method, it also accepts a config object.
{
  userVisibleOnly:'bool'. (push sent to vendor server is only visible by this user/ current client)
}

// to secure the subscription, we try to validate the user with 2 key.
// a public and a private key.
// install the web push package, the webPush package will generate public and private keys.
// like so,
const webPush = require('web-push')
const keys = webPush.generateVAPIDKeys()

returns an object of keys.

{
  publicKey: 'BG9dVArZzNYaX3tzQ1stnwd1fN5Oluj5-SypfucipzyuVpWxAePsWQuHV2pjPnIGz2JZbcMMystFwcQraddDQKs',
  privateKey: 'Z9F2rUNRatbOhBaU6_jgTT3AbGh5ay7stZkeDJ4r34c'
}

{
  publicKey: 'BJTnb4WHULLLnmRmPOhqrf6rQGJ7KYmcQ3XNzieAvFqtomw47Je3uFJnLtI1UIzekfLRjm3stdOejndX81vKUqs',
  privateKey: 'Eg8zE5OhxZQeR5vQfO_mCGfc6sMLqIORptj93_FQpPQ'
}

// algo to properly set up a secure subscription
    try {
          // create a new subscription.
          const pubKey =
            "pubKeyString";

// convert to 8 bit array
          let pubKeyConvert = url64To8bitArr(pubKey);

// create a new subscription with pushManager and configur the options object.

          const subscription = await swReg.pushManager.subscribe({
            userVisibleOnly: true,
            applicationServerKey: pubKeyConvert,
          });

// send the subscription details object to our backend.

          const res = await fetch("http://192.168.8.148:3000/subs", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Accept: "application/json",
              "Access-Control-Allow-Headers": "*",
            },
            body: JSON.stringify(subscription),
          });

          console.log(res);
          await showNotification();
        } catch (error) {
          console.log(error);
        }

//////// push: server side implementation.
// with the webpush api

// step 1: set vapid details. remember the pub/priv keys.
// with the webpush api i can access the setVapidDetails() method.
// it takes 3 params, valid email, public key and private key.

   webPush.setVapidDetails(
      "mailto:support@prowebdev-consultants.com",
      "BJTnb4WHULLLnmRmPOhqrf6rQGJ7KYmcQ3XNzieAvFqtomw47Je3uFJnLtI1UIzekfLRjm3stdOejndX81vKUqs",
      "Eg8zE5OhxZQeR5vQfO_mCGfc6sMLqIORptj93_FQpPQ"
    );

// step 2 retrieve subs from db.

// step 3 craft the push config object.
    pushConfig = {
      endpoint: subFromStore.endpoint,
      keys: {
        auth: subFromStore.keys.auth,
        p256dh: subFromStore.keys.p256dh,
      },
    };

step 4, we can send the notification by calling , webPush.sendNotification(pushConfigobject, string/json push payload).

    webPush.sendNotification(pushConfig,JSON.stringify({
          title: "push notification",
          content: "testing new push notification",
        })
      ).catch((err) => {
        console.log(err);
      });


/////////////////////////////////////////////////////////////////////////// listening for push notifications.
// in serviceWorker add a handler to the onpush listener.

onpush = (e)=>{
  // some operation, showing the push notification to client.
}

// once push is evet is fired,
// we then show the push notification, from the serviceWorker.

self.registration.showNotification('title', notificationObject)

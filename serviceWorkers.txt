// service workers. are like worker threads, mimicing a form multithreading but for the browser. workers have their own threads wher they execution their own javascript. this is useful for cpu heavy tasks and network proxy task, they are run in the background off the main thread for the webapp not block are main javascript execution.

why service workers.
service worker are specicial becaus it gives our web app a native feel. the service worker makes our web app have a next generation app feel.

// offline mode
// background sync 
// web push notify

// javascript is executed in a single thread. 
// when the browser loads the javascript. all the code is executed on a single thread. all the functions, dom manipulations, input prompts , alert s. synchronous operations. but it also has event loop to schedule asynchrous functions and operations(io bound tasks).


// service workers. are like worker threads, mimicing a form multithreading but for the browser. workers have their own threads wher they execution their own javascript. this is useful for cpu heavy tasks and network proxy task, they are run in the background off the main thread for the webapp not block are main javascript execution.

// service workers. are decoupled from html
// it accessible to all html pages rendered
// service workers live on after the browser is closed. they are background processes in the browsers


/////////////////////////////////////////////////////////////////
// we use service workers with events architecure.

// server workers events.
1 fetch : fetch request.

2 push Notifications : browsers have their own push notifications server and we can prompt our service worker to push our notifications to the client by pushing the notifications from our server to the browsers push server.

3 notifications interaction from user; we can listen to this event and perfome an opertion needed.

4 background sync: in the event of a failed post request. the request can be stores and then remade once the client has better internet connectivity.

5 life cycle events.


/////////////////////////////////////////////////////////
life cycle of a service worker: how the registered.

1 our app is load normally: htmls and js files are loaded, now in our js file we register a service worker( service workers have their own js file). while our main js registers the service worker, two events will be triggered:
        i: install event: when the browsr installs the service worker. doesnt always re-install on refresh, it will always reinstall if our js file changes in size.

        ii: activate event: fires when its ready to be activated.(more on this). the service worker is activated if the is no service worker running in the background.

        once activate, it will go into idle mode and the service will wait for events, if no event occurs in a specified time it will terminate not that its deleted, it can re awaken and put into idle mode.

        // practice register, install and activate service workers.

////////////////////////////////////////////
// service worker file scope: the service worker js file is scoped only to the pages in the directory the worker is contained, to enable a worker to be accessible to all pages(html files), add the worker to the root of the project directory. and it should be registered globally. ie app.js is used in all html pages to registering worker from app.js is a good idea.

//////////////////////////////////////////////
// register service workerjs: create service worker js file.
// in file check if service worker exists in the browser.
// the register method has a second param, it is an options object where one can specify the scope the service worker covers.

// add this to app.js
(async () => {
  if (navigator.serviceWorker) {
    const swReg = await navigator.serviceWorker.register("../../sw.js",{scope:'pathToPage'});

    if (swReg.active) {
      console.log("registered service worker");
    }
  }
})();

// nb: service workers can only work when served over https. service worker can sniff and intercept data packets, for security reasons it has to srved on https because data is encrypted. local host is an exeption because of development reasons

/////////////////////////////////////////
// listening for events on service workers. 
in the service we have access to self(similar to window on a regular js file). here we can attach event listeners to the self object
// add this to app.js

// listen to installing event:

oninstall = function (e) {
  console.log("service worker installing....", e);
};

// nb, to activate serviceWorker close the tab and open a new tab. this might be needed if we make changes to our serviceWorker code.


// listen to activating event:
onactivate = function (e) {
  console.log("service worker activating....", e);
};


//////////////////////////////////////////////
// listen to events that arent concerned with life cycle events.
// fetch: this occurs when ever our app uses the fetch api. the fetch api is used by our image components or when used by us to fetch data from a host.
// from the fetch listeners when can intercept requests and respond to requests. from here we can perform bgSyncing.

// fetch is done from and by our web app, while the other events are handled by the browser

onfetch = function (e) {
  console.log("service worker fetching....", e);
};

//////////////////////////////////////////////////
// install banner:
set up remote debbugging:
// follow.
Connecting Chrome Developer Tools to a Real/ Emulated Device
It's easy to connect your Chrome Developer Tools with a Real or Emulated Android Device (event though the latter unfortunately never worked for me).

The following article explains it step-by-step and by using helpful images: https://developers.google.com/web/tools/chrome-devtools/remote-debugging/

Make sure you enabled "Developer Mode" on your Device! You do that by tapping your Android Build Number (in the Settings) 7 times. Yes, this is no joke ;-

// trigger banner install at a later point.

in app.js
listen to the 'beforeinstallprompt' event, 
in the event handler. prevent the default behavior of the 'beforeinstallprompt' event. this will prevent chrome from prompting the install option.

window.promptEvent = null;

onbeforeinstallprompt = (e) => {
  console.log("before install prompt triggered");
  e.preventDefault();
  window.promptEvent = e;
};


add this code to the function where we want to trigger install.
if (window.promptEvent) {
    promptEvent.prompt();

    const choice = await promptEvent.userChoice;
    if (choice.outcome === "dismissed") {
      console.log("user dismissed install");
    }
  }


// addpolyfills: 
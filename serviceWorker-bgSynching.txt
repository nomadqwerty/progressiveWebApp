backgroundSynching is a techinque used for handling offline post/put requests. as in the previous section we handled offline support for get requests( data that the client needs to display or the basic frame of the application), but we couldnt do this for post requests(data that the clients sends and a remote server needs). so bgSynch saves the day. with bgsynching i can store post requests, still send the request is the client has no internet connection, and if the user is offline i can then register a synch Task to run when ever the client has internet connection or even when the client has closed down the application. the synch Task will the send the post request with out the need for the user to resend the same post request.

to register a sync task we do so on our service worker but not from our service worker, this is because want to perform bgSync on operations(requests) initiated by the user. so we can access the registered service worker from the navigator api.

so bgSync is used on forms(post requests).

// access registered service worker from the navigator.
const sw = await navigator.serviceWorker.ready;

// before registering the tag on the sync object. we need to store the data in a store(preferably indexdb )

const db = await dataBase;
const tx = db.transaction("sync-post", "readwrite");
const store = tx.objectStore("sync-post");
console.log(store);
store.put(post, "formData");
tx.complete;

// once sw is returned from the service worker sync interface(prototype of syncManager) and we have store the form data we can register and event(tag).
sw.sync.register("sync-task-postreq");


// if the browser doest support service workers and syncManager we just perfom the post request as usaully and it will have bg sync. so no offline support.
   // if syncmanager not supported.
      const post = {
        id: new Date().toISOString(),
        title: titleInput.value,
        location: locationInput.value,
        image:
          "https://firebasestorage.googleapis.com/v0/b/impactapi.appspot.com/o/sanfranBridge.jpg?alt=media&token=72665174-c13b-4411-b4c3-128dc3855d5e",
      };
      const res = await fetch(urlLink, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json",
        },
        body: post,
      });
// workbox is a tool from google that makes managing sw much easier and less verbose.

// workbox is easy to run, npm i workbox-cli@2 --save-dev.

// once installed setup scripts for "genSw":"workbox generate:sw"

// run in terminal : npm run genSw, this will generate a service worker file.

////////////////////////////////////////////////////////////////////////
workbox capabilities, pre caching. workbox makes it easy to precache files. infact it precaches files immediately after file is generated.

// configure the "workbox-cli-config.js" file to cache file you want.

module.exports = {
  globDirectory: "public\\",
  globPatterns: ["**/*.{js,ico,html,json,css}", "src/images/*.{jpg,png}"],
  swDest: "public/service.js",
  globIgnores: ["..\\workbox-cli-config.js", "help/**"],
};



const fileManifest = [
  {
    "url": "dbUtils.js",
    "revision": "eb465d2d6614f0514f24c4b70bb80940"
  },
  {
    "url": "favicon.ico",
    "revision": "2cab47d9e04d664d93c8d91aec59e812"
  },
  {
    "url": "index.html",
    "revision": "dcdb38d559204791192b062819eaab75"
  },
  {
    "url": "manifest.json",
    "revision": "53ba241d6eca3efbb807b4b4f390538b"
  },
  {
    "url": "offline.html",
    "revision": "070fa9b17534ff6b4dec8006619cd892"
  },
  {
    "url": "src/css/app.css",
    "revision": "1449397ee1bd9487a4f9469470d8d9ec"
  },
  {
    "url": "src/css/feed.css",
    "revision": "2079c5fdf053a3ea25e94d20738db08c"
  },
  {
    "url": "src/css/help.css",
    "revision": "1c6d81b27c9d423bece9869b07a7bd73"
  },
  {
    "url": "src/js/app.js",
    "revision": "7ca810b46eb9e0944988c076487fc87f"
  },
  {
    "url": "src/js/feed.js",
    "revision": "50c548608c5836e20a75752d003048dc"
  },
  {
    "url": "src/js/fetch.js",
    "revision": "6b82fbb55ae19be4935964ae8c338e92"
  },
  {
    "url": "src/js/idb.js",
    "revision": "017ced36d82bea1e08b08393361e354d"
  },
  {
    "url": "src/js/material.min.js",
    "revision": "713af0c6ce93dbbce2f00bf0a98d0541"
  },
  {
    "url": "src/js/promise.js",
    "revision": "4338cc2ce1f34ad2f4ba918ca762e001"
  },
  {
    "url": "sw.js",
    "revision": "c4fd7aa63feee204b5835baf06575645"
  },
  {
    "url": "src/images/main-image-lg.jpg",
    "revision": "31b19bffae4ea13ca0f2178ddb639403"
  },
  {
    "url": "src/images/main-image-sm.jpg",
    "revision": "c6bb733c2f39c60e3c139f814d2d14bb"
  },
  {
    "url": "src/images/main-image.jpg",
    "revision": "5c66d091b0dc200e8e89e56c589821fb"
  }
];

const workboxSW = new self.WorkboxSW();
workboxSW.precache(fileManifest);


///// building up on existing sw.

// add to scripts "wbx-inject": "workbox inject:manifest"

// create a base sw file, swBase.js 

// add the below code to it.

importScripts("workbox-sw.prod.v2.1.3.js");

const workboxSW = new self.WorkboxSW();
workboxSW.precache([]);


// configure the "workbox-cli-config.js" and the swSrc prop, this points to our base file that workbox will build upon.

module.exports = {
  globDirectory: "public\\",
  globPatterns: ["**/*.{js,ico,html,json,css}", "src/images/*.{jpg,png}"],
  swSrc: "public/servicebase.js",
  swDest: "public/service.js",
  globIgnores: ["..\\workbox-cli-config.js", "help/**"],
};

run inject script rather than generate scripts.

//// routing for dynamic precache(cdn links), when using the workbox api, we can dynamically cache requests. 

// ie:

let routeMatch = /.*(?:googleapis|gstatic)\.com.*$/;

const workboxSW = new self.WorkboxSW();

// call router.registerRoute('route to register',cache strategy), this method will cache a dynamic request, create a cache store it and will also perfomr a cache first then network strategy. it will reach out to the cache then make the request.

workboxSW.router.registerRoute(
  routeMatch,
  workboxSW.strategies.staleWhileRevalidate({
    cacheName: "cdnCache",
  })
);

// cache options,


the object passed into staleWhileRevalidate(), can be further configured.
// cache lifespan, we can specify how long a cache should exist, how much entries it can take.

cacheExpiration:{
  maxEntries:10,
  maxAgeSeconds:60*60*24*30
}



////////////////////////////////////////////////////////////////////////
// custom handlers the above method "registerRoute", can take in an anonymous function, this function will run when a fetch event is triggered for the registered route. 
this function will run instead of any default strategies.

// https://impactapi-default-rtdb.firebaseio.com/posts.json
router.registerRoute('url path',(args)=>{
  // args is an object passed into the function when executed. like event objects

  return {}
})

router.registerRoute('https://impactapi-default-rtdb.firebaseio.com/posts.json',(args)=>{
  // args is an object passed into the function when executed. like event objects
  console.log(args)
  const res = await fetch(args.event.request);
   const cloneRes = res.clone();
      const data = await cloneRes.json();

    const db = await dbPromise;
      const txDelete = db.transaction("posts", "readwrite");
      const storeToClear = txDelete.objectStore("posts");
      await storeToClear.clear();
      txDelete.complete;

 for (let key in data) {
        try {
          // TODO: turn to function.
          const tx = db.transaction("posts", "readwrite");
          const store = tx.objectStore("posts");
          store.put(data[key], key);
          await tx.complete;
          // console.log("done");
        } catch (error) {
          console.log(error);
        }
      }

  return res
})



////////////////////////////////////////////////////////////////////////
// adding offline support with workbox.
the registerRoute() first args is usually a string but in specific cases it can be a fucntion that has to return a bool.

registerRoute((routeData)=>{
// function is called with a route data object.

const match = routeData.event.request.headers.get("accept).includes("text/html")

return match
},async (args)=>{
  try{
    const res = await fetch(args.event.request)

    return res
  }catch{
      const cacheStore = await caches.match(args.event.request);

  if (cacheStore) {
    return cacheStore;
  } else {
    const staticStore = await caches.open('workbox-precaching-revisioned-v1-http://127.0.0.1:8080/');

    const match = await staticStore.match("/offline.html");
      return match;
    
  }
  }
})


/////////////////////////////////////////////////////////////////////////// minify javascript files
// 


////////////////////
ChatGPT, as a large language model, can be a valuable tool for various projects due to several reasons: ChatGPT has been trained on a vast amount of text data, allowing it to comprehend and generate human-like responses. It can understand complex queries, context, and nuances in language, making it suitable for a wide range of conversational applications, OpenAI's models are trained on vast datasets and are regularly updated with new information. Although my knowledge cutoff is in September 2021, ongoing improvements and updates allow the model to stay up to date with the latest information and developments, ChatGPT is accessible online and can be easily integrated into existing platforms or applications using APIs. This availability facilitates its deployment and usage across a wide range of projects and platforms.

TopBuy software addresses the problem of buyers lacking comprehensive information and personalized recommendations when making purchasing decisions. Traditional online shopping experiences often leave customers overwhelmed by an abundance of options and insufficient product details. TopBuy leverages the power of ChatGPT to analyze vast amounts of product data, allowing users to interact using natural language queries. By providing personalized recommendations and detailed analysis based on individual preferences, TopBuy empowers purchasers to make more informed decisions, ensuring they find the most suitable products that align with their specific needs and preferences.

TopBuy software utilizes ChatGPT to revolutionize the purchasing process by providing personalized recommendations and comprehensive analysis based on user preferences
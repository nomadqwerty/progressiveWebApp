// cache data on user interactions. caching on demand is possible because, we can accces the cache api in any of our js app files.

// check if caches is in window object first.

// somewhere in js app files
  if (window.caches) {
    const btn = document.createElement("button");
    btn.textContent = "save";
    btn.addEventListener("click", async function (e) {
      const userCache = await caches.open("userV1");
      userCache.addAll([
        "https://httpbin.org/get",
        "../../src/images/main-image-sm.jpg",
      ]);
    });
    cardSupportingText.appendChild(btn);
  }

/////////////////////////////////////////////////////////////////////
// providing offline fallback.
// if the client is offline, any fetch to get data not stored in cache will fail and throw an error. in a try catch block we can then catch errors and handle errors that happen due to failed fetch calls, we handle this fetch error by returning an already cached html page to notify the client of the error. by default the browser will tell the client but we need to make it look more like our app so we add a html offline page.

 catch (error) {
        // open cache store(where the offline html is stored)
        const staticStore = await caches.open(cacheName);

        // find a match for the offline response stored in cache
        const match = await staticStore.match("/offline.html");

        // return the response
        return match;
      }

/////////////////////////////////////////////////////////////////////////// caching strategy:

// so far we started caching with a network fallback strategy. where our page makes a request and our serviceWorker intercepts the request and then checks the cache store if request is in it, if it is in the cache store serviceWorker responds with the cached response and if the serviceWorker doesnt find the request in the cache store it will proceed with the fetch request as usual.

// cache only stratergy: the cache only strategy works by depending solely on the cache store. for any request not in cache store they will be no response. no dynamic caching is performed to. all the data the app may need is gotten on during the service worker install.

// by responding with only what is in the cache the app will be very limited, cache only is used in very specific conditions.

onfetch = (e) => {
  e.respondWith(
    (async () => {
      const cacheStore = await caches.match(e.request);
      return cacheStore;
    })()
  );
};


// network only strategy: this is the complete opposite of the cache only, here the serviceworker intercepts the request and continues with the request as usual. its a very redundant technique and should be avoided if thats all we need to do, because the app perfoms request as usual.

// onfetch = (e) => {
//   e.respondWith(
//     (async () => {
//       const res = await fetch(e.request);
//       return res;
//     })()
//   );
// };

// network then cache fallback: this strategy will first make the request then cache the response and if request fails we then reach into cache to find response. this doesnt take the full advantage of caching which is a faster response if response was in cache rather then making a request then if it fails we then check the cache for respond and if responds doesnt fail but takes time(slow network connection) this will leave the user waiting for long time.
onfetch = (e) => {
  e.respondWith(
    (async () => {
      try {
        const res = await fetch(e.request);

        if (res) {
          if (!e.request.url.includes("chrome-extension")) {
            const dynamicStore = await caches.open(dynamicName);
            dynamicStore.put(e.request.url, res.clone());
          }
        }

        return res;
      } catch (error) {
        const cacheStore = await caches.match(e.request);
        return cacheStore;
      }
    })()
  );
};

// the cache first then network fallback strategy is very power ful. it will first check the cache for responses if it has a response it will return the response, but at the same time it will also make the request as usual when the response is returned we then update the cache data will the new. the first part of this technique is done directly in the app file/s. there is a condition in which the fetch responds faster than the cache. in that case we can make use of a bool value. we set the value to true if once the request is done and perform caching only if bool is false(meaning fetch hasnt responded). 


// in app files
let networkData = false;

fetch("https://httpbin.org/get")
  .then(function (res) {
    return res.json();
  })
  .then(function (data) {
    console.log("from web", data);
    clearcard();
    createCard();
  });

if (!networkData) {
  if (window.caches) {
    window.caches
      .match("https://httpbin.org/get")
      .then((res) => {
        if (res) {
          return res.json();
        }
      })
      .then((res) => {
        console.log("from cache", res);
        clearcard();
        createCard();
      });
  }
}

// the service worker will still intercecpt the fetch request made from the app files it will add the new response to the cache store, so we can easily store the updated requests in the cache.
// this stratergy will cache things twice, this is because we originally check if response is in caceh(from serviceWorker) and if its not in store we make request, we arent checking for any response in the cache now we just make the request then cache it in serviceWorker.
// network first with cache fallback version2(better).
onfetch = (e) => {
  e.respondWith(
    (async () => {
      const res = await fetch(e.request);

      if (res) {
        if (!e.request.url.includes("chrome-extension")) {
          const dynamicStore = await caches.open(dynamicName);
          dynamicStore.put(e.request.url, res.clone());
        }
      }

      return res;
    })()
  );
};

// the above technique can be improved upon to have offline support. by parsing the url property on the event request object (event.request.url) we can use logic blocks to perfom certain caching technique based the url.

// when in offline mode we can still cathc the error(failed to fetch) and then respond with our cache data. this to say if the network request fails we can catch the error and use our cache as a fallback. we can also then add the offline page for pages not in cache.
onfetch = (e) => {
  e.respondWith(
    (async () => {
      try {
        const res = await fetch(e.request);

        if (e.request.url.indexOf("https://httpbin.org/get") > -1) {
          if (!e.request.url.includes("chrome-extension")) {
            const dynamicStore = await caches.open(dynamicName);
            dynamicStore.put(e.request.url, res.clone());
          }
        }

        return res;
      } catch (error) {
        const cacheStore = await caches.match(e.request);
        if (cacheStore) {
          return cacheStore;
        } else {
          const staticStore = await caches.open(cacheName);

          const match = await staticStore.match("/offline.html");

          return match;
        }
      }
    })()
  );
};


/////////////////////////////////////////////////////////////////////////// caching post requests. post requests really cant be cached because it used to send data to a web server, and if the web server is remote we will need internet connectivity to be able to send data. so offline caching is not needed. but we are still able to cache initial responses for post request done earlier.


// trimming cache store to prevent maxing out cache storage.
const trimCache = async (cacheName, maxLimit) => {
  const cacheStore = await caches.open(cacheName);
  const keys = await cacheStore.keys();
  // console.log(keys);

  if (keys.length > maxLimit) {
    const keysHalf = keys.length / 2;
    console.log(keysHalf);
    for (let i = 0; i < keysHalf; i++) {
      await cacheStore.delete(keys[i]);
    }
  }
};


/////////////////////////////////////////////////////////////////////////
// delete old service workers.
// @TODO: follow this code to delete old service workers.

// get array of registered service workers.
const regArray = await navigator.serviceWorker.getRegistrations();

// loop over array
if (regArray.length > 0) {
  for (let i = 0; i < regArray.length; i++) {

    // for each registration call the unregister() method on it.
    // unregister() returns boolean.
    const didUnregister = await regArray[i].unregister();
         
  }
}


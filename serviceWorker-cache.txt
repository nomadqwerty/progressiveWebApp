why caching. when we use service workers one of the main reasons is offline support for a web app.

by caching data the service worker can provide offline support for a webapp.

caching data is important for modern day webapps. for example the app i plan to build will have data such as messages(sms and emails) from clients, in a normal web app if i have no internet connection, i wont be able to access old messages(as i would in a native app). but cahing gives it that leverage. So by caching messages sent from clients i can access old messages with no internet connection.

also good for poor connections.

// the cache api. the api is an abstraction for developers to cache data that a web app will need.

// the browser has a cache but as developers we cant access the cache, we cant tell it what data to cache. so we need the cache api.


// cache consists of a key value pair data store.
// the key is the request and the value is the response.

// what is good for cacching.
// static cache
// dynamic cache.

// the primary and most important, part to cache in website is the static part(html,css). this is known as static content. this contents are what the user always expects to see(navigation, footer, body hmtl, with css). so we need to cache the static content(website structure) so the user can view the static content even if the have no internet connection.
// static content can be cache at any point in a service worker, but its better to cache the static content at the "service worker life cycles". withen the live cycles events functions can be set to perform caching.

// two main life cycles: oninstall and onactivate. now using on activate isnt a good idea because this event is triggered after installation.

// so the most optimal place to store the static content is in the install life cycle. the service worker is installed once and lives in the browser until a new service worker is registered. so once a user loads our page and the service worker is installed. the app can always served the static content even with no internet connection.

oninstall = async function (e) {
  try {
    // create a cache store is async so use async await functions.
    // create cache with the caches object(global)
    // use caches.open('cacheName') ie caches.open('static)

    const swCache = await caches.open("static");
    console.log(swCache);

    // caches have many methods. but the most common is the add('path to static file')
    swCache.add("./src/js/app.js");
  } catch (error) {
    console.log(error.message);
  }
};

// NB: cache store has a limited space so its good to conserve  memory. if its full the browser can also clear the cache stoore.


// retrieving data from cache. Note that the cache has a key(request) and a value(response), which means that the data can be retrieved in the onfetch event because it will still make a request to the server the files are store(even if its hosted on the same server). so use fetch event handler.

// cache retrieved methods. 
// match: match is use to find a match of the request we need from the cache store
// e.respondWith is synchronous, so we need to execute async caches match method inside the respondWith method. 
// promise based(then,catch)
 e.respondWith(
    caches
      .match(e.request)
      .then((res) => {
        if (res) {
          return res;
        } else {
          return fetch(e.request);
        }
      })
      .catch((err) => console.log(err.message))
  );
// promise based (async IIFE){
    e.respondWith(
      // execute iife in respondWith() call
    (async () => {
      // await matching request from cache store
      const cacheStore = await caches.match(e.request);

      // static cache
      if (cacheStore) {
        // if response is found in cache return the cache response
        console.log(cacheStore);
        return cacheStore;
      } else {
        // if response not found in cache continue with fetching requests as usaull
        const res = await fetch(e.request);
        console.log(res);
        return res;
      }
    })()
  );
}

// when adding files, its best to add them like url and not file path.
ie if we cache /index.html , if a user visits the root of our site / they will get no static content(html)

so add request as if it was our site

add('/')
add('/index.html')
add('/styles.css')
add('/app.js')


//adding one by one is tedious.
// make use of addAll([array of urls])

// caching polyfils. polifils are needed by mostly older browsers, and oldr browsers do not support service workers. so caching polyfils might not be necessary. but rarely modern browsers maybe need these polyfils so for perfomance sake it can be added its up to the developer.

// we can also cache data/ files from remote servers. cache the link(this are request that are made as the app is loaded, not after it is loaded ie a request that is made dynamically maybe in the js files or even a request that ends up making another request from another remote server)

// since static files are to be cached at install handler.
// dynamic files are to be cached at fetch handler.

// why fetch? we want to store data that might not be available on the load of our server(when install event is fired), so any later data returned from any future request is best handled in the fetch handler(when ever fetch is triggered).

    e.respondWith(
      // execute iife in respondWith() call
    (async () => {
      // await matching request from cache store
      const cacheStore = await caches.match(e.request);

      // static cache
      if (cacheStore) {
        // if response is found in cache return the cache response
        console.log(cacheStore);
        return cacheStore;
      } else {
        // if response not found in cache continue with fetching requests as usaull
        const res = await fetch(e.request);
        console.log(res);
        return res;
      }
    })()
  );
// dynamically cache data
onfetch = function (e) {
  e.respondWith(
    (async () => {
      // await matching request from cache store
      const cacheStore = await caches.match(e.request);

      // static cache
      if (cacheStore) {
        // if response is found in cache return the cache response
        console.log(cacheStore);
        return cacheStore;
      }  else if (!cacheStore) {
        // dynamically cache data.

        // check if url has chrome extension
        if (!e.request.url.includes("chrome-extension")) {
          
          // if it doesnt have chrome extension in it, create new cache for dynamic data.
          const newCacheStore = await caches.open("dynamic");

          // add request to dynamic cache.
          newCacheStore.add(e.request.url);

          // retrieved added request's response
          const newCacheData = await newCacheStore.match(e.request);


          if (newCacheData) {
            // if response is found, return that response.

            return newCacheData;
          }
        } else {
          // if url has chrome extension continue with fetch as usual.

          const res = await fetch(e.request);
          return res;
        }
      }
    })()
  );
};
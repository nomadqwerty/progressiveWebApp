why caching. when we use service workers one of the main reasons is offline support for a web app.

by caching data the service worker can provide offline support for a webapp.

caching data is important for modern day webapps. for example the app i plan to build will have data such as messages(sms and emails) from clients, in a normal web app if i have no internet connection, i wont be able to access old messages(as i would in a native app). but cahing gives it that leverage. So by caching messages sent from clients i can access old messages with no internet connection.

also good for poor connections.

// the cache api. the api is an abstraction for developers to cache data that a web app will need.

// the browser has a cache but as developers we cant access the cache, we cant tell it what data to cache. so we need the cache api.


// cache consists of a key value pair data store.
// the key is the request and the value is the response.

// what is good for cacching.
// static cache
// dynamic cache.

// the primary and most important, part to cache in website is the static part(html,css). this is known as static content. this contents are what the user always expects to see(navigation, footer, body hmtl, with css). so we need to cache the static content(website structure) so the user can view the static content even if the have no internet connection.
// static content can be cache at any point in a service worker, but its better to cache the static content at the "service worker life cycles". withen the live cycles events functions can be set to perform caching.

// two main life cycles: oninstall and onactivate. now using on activate isnt a good idea because this event is triggered after installation.

// so the most optimal place to store the static content is in the install life cycle. the service worker is installed once and lives in the browser until a new service worker is registered. so once a user loads our page and the service worker is installed. the app can always served the static content even with no internet connection.

// static cacching
oninstall = (e) => {
  console.log("[Service Worker] Installing Service Worker ...", e);

  // tell browser to wait for operation to complete before continuing.
  e.waitUntil(
    (async () => {
      // create cache
      const staticStore = await caches.open("static");

      // add file one by one or add all
      // addAll
      staticStore.addAll([
        "/",
        "/index.html",
        "/src/js/app.js",
        "/src/js/feed.js",
        "/src/js/promise.js",
        "/src/js/fetch.js",
        "/src/js/material.min.js",
        "/src/css/app.css",
        "/src/css/feed.css",
        "/src/images/main-image.jpg",
        "https://fonts.googleapis.com/css?family=Roboto:400,700",
        "https://fonts.googleapis.com/icon?family=Material+Icons",
        "https://cdnjs.cloudflare.com/ajax/libs/material-design-lite/1.3.0/material.indigo-pink.min.css",
      ]);
    })()
  );
};

// NB: cache store has a limited space so its good to conserve  memory. if its full the browser can also clear the cache stoore.

/////////////////////////////////////////////////////////////////////////
// retrieving data from cache. in retrieving the data from the cache, note that cache store request and response. we now know that all our fetch requests can be intercepted in the onfetch handler. so if we check and find that there is a particular request has been stored in the cache we just pull the response from the cache rather pulling the response from a remote server. saves time and can enable offline capabilties.

// cache retrieved methods. 
// match: match is use to find a match of the request we need from the cache store
// e.respondWith is synchronous, so we need to execute async caches match method inside the respondWith method. 
// promise based(then,catch)
 e.respondWith(
    caches
      .match(e.request)
      .then((res) => {
        if (res) {
          return res;
        } else {
          return fetch(e.request);
        }
      })
      .catch((err) => console.log(err.message))
  );
// promise based (async IIFE){
    e.respondWith(
      // execute iife in respondWith() call
    (async () => {
      // await matching request from cache store
      const cacheStore = await caches.match(e.request);

      // static cache
      if (cacheStore) {
        // if response is found in cache return the cache response
        console.log(cacheStore);
        return cacheStore;
      } else {
        // if response not found in cache continue with fetching requests as usaull
        const res = await fetch(e.request);
        console.log(res);
        return res;
      }
    })()
  );
}

// when adding files, its best to add them like url and not file path.
ie if we cache /index.html , if a user visits the root of our site / they will get no static content(html)

so add request as if it was our site

add('/')
add('/index.html')
add('/styles.css')
add('/app.js')


//adding one by one is tedious.
// make use of addAll([array of urls])

// caching polyfils. polifils are needed by mostly older browsers, and oldr browsers do not support service workers. so caching polyfils might not be necessary. but rarely modern browsers maybe need these polyfils so for perfomance sake it can be added its up to the developer.

// we can also cache data/ files from remote servers. cache the link(this are request that are made as the app is loaded, not after it is loaded ie a request that is made dynamically maybe in the js files or even a request that ends up making another request from another remote server)

// since static files are to be cached at install handler.
// dynamic files are to be cached at fetch handler.

// why fetch? we want to store data that might not be available on the load of our server(when install event is fired), so any later data returned from any future request is best handled in the fetch handler(when ever fetch is triggered).

    e.respondWith(
      // execute iife in respondWith() call
    (async () => {
      // await matching request from cache store
      const cacheStore = await caches.match(e.request);

      // static cache
      if (cacheStore) {
        // if response is found in cache return the cache response
        console.log(cacheStore);
        return cacheStore;
      } else {
        // if response not found in cache continue with fetching requests as usaull
        const res = await fetch(e.request);
        console.log(res);
        return res;
      }
    })()
  );
// dynamically cache data
onfetch = (e) => {
  e.respondWith(
    (async () => {
      // check if cache has response
      const cacheStore = await caches.match(e.request);

      if (cacheStore) {
        // if so return the cache response
        return cacheStore;
      } else {
        // else not in static cache store. we cache dynamically
        // dynamic caching

        // fetch request if request not cached.
        const fetchRes = await fetch(e.request);

        // create new cache store
        const dynamicStore = await caches.open("dynamic");

        // manually put request url and and response clone from the above fetch into cache.
        dynamicStore.put(e.request.url, fetchRes.clone());

        // return response
        return fetchRes;
      }
    })()
  );
};


//////////////////////////////////////////////////////////////////////////
// cache versioning: this is needed to update cache data. to return new data instead old cache data so we need to create new sub caches. 
if changes are made to the app, we need to update cache so that the changes can reflect in the app.

// now creating multiple sub caches isnt optimal, so any time we create a new cache its best to delete old cache.

as we know static cache is best stored in the install event. as soon as our serviceWorker is registered we cache the data, we also know that dynamic cache are best made in the fetch event because the data to cached arent made during the install but much later. so we get that done in the fetch event, fetch is triggered any time our app in one way or the other uses fetch api to request for data.

// with the above stated, the best place to clear cache is in the activate event. the activate event is fired when the serviceWorker is activated and running.so serviceWorker is registered and the new cache has been created in the install event(so its already available in the app) once the serviceWorker is then activated we now have to two caches available so we delete the old one. deleting old cache in install event is unpredictable becaue we could be delete the old cache when our app needs it and there is no new cache to fallback on. the best bet is in activate event.

// delete cache.
onactivate = (e) => {
  console.log("[Service Worker] Activating Service Worker ....");
  e.waitUntil(
    (async () => {
      // get list of all our cache(returns keys for all caches)(async operation)
      const cacheArray = await caches.keys();

      // loop over array.
      cacheArray.forEach((key, i) => {
        // if key is not a match with new cache store name, then delete it
        if (key !== cacheName && key !== dynamicName) {
          console.log(key);
          caches.delete(key);
        }
      });
    })()
  );
  return self.clients.claim();
};
